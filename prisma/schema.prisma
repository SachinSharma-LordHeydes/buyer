// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  BUYER
  SELLER
  ADMIN
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  id           String    @id @default(cuid())
  clerkId      String?   @unique
  email        String    @unique
  role         Role      @default(BUYER)
  profile      Profile?  @relation("UserProfile")
  orders       Order[]   @relation("UserOrders")
  carts        String[]
  wishLists    String[]
  orderedItems String[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  @@index([email])
  @@map("users")
}

model Profile {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  user      User?    @relation(name: "UserProfile", fields: [userId], references: [id])
  userId    String?  @unique // Index for faster joins
  address   Address? @relation("ProfileAddress")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("profiles")
}

model Address {
  id        String   @id @default(cuid())
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  profile   Profile? @relation(name: "ProfileAddress", fields: [profileId], references: [id])
  profileId String?  @unique // Index for faster joins
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@map("addresses")
}

model Order {
  id        String      @id @default(cuid())
  user      User        @relation(name: "UserOrders", fields: [userId], references: [id])
  productId String // JSON or text field to store product details
  userId    String // Index for faster joins
  total     Decimal     @db.Decimal(10, 2) // Use Decimal for monetary precision
  status    OrderStatus @default(PENDING) // Index for status-based queries
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([userId])
  @@index([status])
  @@map("orders")
}
